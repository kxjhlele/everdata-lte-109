package com.eversec.lte.sdtp.server;

import static com.eversec.lte.constant.SdtpConstants.SDTP_HEADER_LENGTH;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_AUTH_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_AUTH_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_CHECK_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_CHECK_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_DATA_CHECK_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_DATA_CHECK_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_REL_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.LINK_REL_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.NOTIFY_XDR_DATA_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.NOTIFY_XDR_DATA_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.VER_NEGO_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.VER_NEGO_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.XDR_RAW_DATA_QUERY_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.XDR_RAW_DATA_QUERY_RESP;
import static com.eversec.lte.constant.SdtpConstants.MessageType.XDR_RAW_DATA_SEND_REQ;
import static com.eversec.lte.constant.SdtpConstants.MessageType.XDR_RAW_DATA_SEND_RESP;
import static com.eversec.lte.processor.data.StaticData.*;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import org.apache.mina.core.future.WriteFuture;
import org.apache.mina.core.service.IoHandler;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.eversec.lte.config.SdtpConfig;
import com.eversec.lte.exception.UnknowSdtpMessageType;
import com.eversec.lte.processor.data.QueueData;
import com.eversec.lte.processor.data.StaticData;
import com.eversec.lte.sdtp.model.LinkAuthReq;
import com.eversec.lte.sdtp.model.LinkAuthResp;
import com.eversec.lte.sdtp.model.LinkCheckReq;
import com.eversec.lte.sdtp.model.LinkCheckResp;
import com.eversec.lte.sdtp.model.LinkDataCheckReq;
import com.eversec.lte.sdtp.model.LinkDataCheckResp;
import com.eversec.lte.sdtp.model.LinkRelReq;
import com.eversec.lte.sdtp.model.LinkRelResp;
import com.eversec.lte.sdtp.model.NotifyXDRDataReq;
import com.eversec.lte.sdtp.model.NotifyXDRDataResp;
import com.eversec.lte.sdtp.model.SdtpHeader;
import com.eversec.lte.sdtp.model.SdtpRequest;
import com.eversec.lte.sdtp.model.SdtpResponse;
import com.eversec.lte.sdtp.model.VerNegoReq;
import com.eversec.lte.sdtp.model.VerNegoResp;
import com.eversec.lte.sdtp.model.XDRRawDataQueryReq;
import com.eversec.lte.sdtp.model.XDRRawDataQueryResp;
import com.eversec.lte.sdtp.model.XDRRawDataSendReq;
import com.eversec.lte.sdtp.model.XDRRawDataSendResp;
import com.eversec.lte.utils.SdtpUtils;

@SuppressWarnings("unused")
public class SdtpServerCompLayerHandler implements IoHandler {
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Override
	public void messageReceived(IoSession session, Object message)
			throws Exception {
		SdtpRequest req = (SdtpRequest) message;
		SdtpHeader header = req.getHeader();
		int messageType = header.getMessageType();
		SdtpResponse resp = null;
		switch (messageType) {
		case VER_NEGO_REQ:
			resp = processVerNegoResp(header, (VerNegoReq) req);
			break;
		case LINK_AUTH_REQ:
			resp = processLinkAuthResp(header, (LinkAuthReq) req);
			break;
		case LINK_CHECK_REQ:
			resp = processLinkCheckResp(header, (LinkCheckReq) req);
			break;
		case LINK_REL_REQ:
			resp = processLinkRelResp(header, (LinkRelReq) req);
			break;
		case NOTIFY_XDR_DATA_REQ:
			resp = processNotifyXDRDataResp(header, (NotifyXDRDataReq) req,
					session);
			if (!SdtpConfig.IS_RESPONESE) {
				resp = null;
			}
			break;
		case XDR_RAW_DATA_SEND_REQ:
			resp = processXDRRawDataSendResp(header, (XDRRawDataSendReq) req);
			if (!SdtpConfig.IS_RESPONESE) {
				resp = null;
			}
			break;
		case XDR_RAW_DATA_QUERY_REQ:
			resp = processXDRRawDataQueryResp(header, (XDRRawDataQueryReq) req);
			break;
		case LINK_DATA_CHECK_REQ:
			resp = processLinkDataCheckResp(header, (LinkDataCheckReq) req);
			break;
		default:
			throw new UnknowSdtpMessageType();
		}
		if (resp != null) {
			WriteFuture future = session.write(resp);
			if (messageType == XDR_RAW_DATA_QUERY_REQ) {
				future.awaitUninterruptibly();
				session.close(false);
			}
		}
	}

	/**
	 * 处理sdtp版本请求
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	private VerNegoResp processVerNegoResp(SdtpHeader header, VerNegoReq req)
			throws Exception {
		int version = req.getVersion();
		int subVersion = req.getSubVersion();
		byte result = SdtpUtils.checkSdtpVersion(version, subVersion);
		VerNegoResp resp = new VerNegoResp(result);
		header.setMessageType(VER_NEGO_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * 处理sdtp鉴权请求
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	private LinkAuthResp processLinkAuthResp(SdtpHeader header, LinkAuthReq req)
			throws Exception {
		String loginID = req.getLoginID();
		String digest = req.getDigest();
		long timestamp = req.getTimestamp();
		int rand = req.getRand();
		byte result = SdtpUtils.checkSdtpAuth(loginID, digest, timestamp, rand);
		LinkAuthResp resp = new LinkAuthResp(result, SdtpUtils.getDigestResp(
				loginID, timestamp, rand));
		header.setMessageType(LINK_AUTH_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * 处理sdtp链路检测请求
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	private LinkCheckResp processLinkCheckResp(SdtpHeader header,
			LinkCheckReq req) throws Exception {
		LinkCheckResp resp = new LinkCheckResp();
		header.setMessageType(LINK_CHECK_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * 链路数据发送校验
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	private LinkDataCheckResp processLinkDataCheckResp(SdtpHeader header,
			LinkDataCheckReq req) throws Exception {
		long sendflag = req.getSendflag();
		long sendDataInfo = req.getSendDataInfo();
		byte result = 0;
		long recDataInfo = sendDataInfo;
		LinkDataCheckResp resp = new LinkDataCheckResp(sendflag, result,
				sendDataInfo, recDataInfo);
		header.setMessageType(LINK_DATA_CHECK_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * 链路释放
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	private LinkRelResp processLinkRelResp(SdtpHeader header, LinkRelReq req)
			throws Exception {
		int reason = req.getReason();
		byte result = 1;
		LinkRelResp resp = new LinkRelResp(result);
		header.setMessageType(LINK_REL_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * XDR信令数据通知
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	protected NotifyXDRDataResp processNotifyXDRDataResp(SdtpHeader header,
			NotifyXDRDataReq req, IoSession session) throws Exception {
		if( SdtpConfig.IS_PROCESS_XDR){
			if (SdtpConfig.IS_BACKFILL) {
				QueueData.PROCESS_XDR_DATA_QUEUE.put(req.toByteArray());
			} else {
				if (SdtpConfig.IS_OUTPUT_ORIGINAL_XDR_2_SDTP) {
					QueueData.ORIGINAL_XDR_SDTP_OUTPUT_QUEUE.put(req);
				}
				if (SdtpConfig.IS_OUTPUT_ORIGINAL_XDR_2_KAFKA) {
					QueueData.ORIGINAL_XDR_KAFKA_OUTPUT_QUEUE.put(req);
				}
				if (SdtpConfig.IS_OUTPUT_ORIGINAL_XDR_2_FILE) {
					QueueData.ORIGINAL_XDR_FILE_OUTPUT_QUEUE.put(req);
				}
				if(SdtpConfig.IS_OUTPUT_ORIGINAL_XDR_2_EMPTY){
					QueueData.ORIGINAL_XDR_EMPTY_OUTPUT_QUEUE.put(req);
				}
			}
		}else{
			StaticData.ABANDON_XDR_COUNT.incrementAndGet();
		}
		
		XDR_RECEIVE_PACKAGE.incrementAndGet();
		XDR_RECEIVE_BYTES.addAndGet(req.getLoad().length + SDTP_HEADER_LENGTH);
		XDR_RECEIVE_COUNT.addAndGet(req.getHeader().getTotalContents());
		byte result = 1;
		NotifyXDRDataResp resp = new NotifyXDRDataResp(result);
		header.setMessageType(NOTIFY_XDR_DATA_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	/**
	 * XDR对应原始数据传输
	 * 
	 * @param header
	 * @param in
	 * @return
	 * @throws Exception
	 */
	protected XDRRawDataSendResp processXDRRawDataSendResp(SdtpHeader header,
			XDRRawDataSendReq req) throws Exception {
		if( SdtpConfig.IS_PROCESS_RAW){
			if (SdtpConfig.IS_OUTPUT_ORIGINAL_RAW_2_SDTP) {
				QueueData.ORIGINAL_RAW_SDTP_OUTPUT_QUEUE.put(req);
			}
			if (SdtpConfig.IS_OUTPUT_ORIGINAL_RAW_2_KAFKA) {
				QueueData.ORIGINAL_RAW_KAFKA_OUTPUT_QUEUE.put(req);
			}
			if (SdtpConfig.IS_OUTPUT_ORIGINAL_RAW_2_FILE) {
				QueueData.ORIGINAL_RAW_FILE_OUTPUT_QUEUE.put(req);
			}
			RAW_RECEIVE_PACKAGE.incrementAndGet();
			RAW_RECEIVE_BYTES.addAndGet(req.getLoad().length + SDTP_HEADER_LENGTH);
			RAW_RECEIVE_COUNT.addAndGet(req.getHeader().getTotalContents());
		}else{
			StaticData.ABANDON_RAW_COUNT.incrementAndGet();
		}
		byte result = 1;
		XDRRawDataSendResp resp = new XDRRawDataSendResp(result);
		header.setMessageType(XDR_RAW_DATA_SEND_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	private XDRRawDataQueryResp processXDRRawDataQueryResp(SdtpHeader header,
			XDRRawDataQueryReq req) {
		short Interface = req.getInterface();
		byte[] xdrid = req.getXdrID();
		long starttime = req.getStartTime().getTime();
		List<byte[]> loads = null;
		byte result = 1;
		byte[] load = null;
		XDRRawDataQueryResp resp = new XDRRawDataQueryResp(result, load);
		header.setMessageType(XDR_RAW_DATA_QUERY_RESP);
		header.setTotalLength(SDTP_HEADER_LENGTH + resp.getBodyLength());
		resp.setHeader(header);
		return resp;
	}

	@Override
	public void messageSent(IoSession session, Object message) throws Exception {
		// TODO Auto-generated method stub
	}

	@Override
	public void sessionCreated(IoSession session) throws Exception {
		logger.info("session {} created!", session.getId());
	}

	@Override
	public void sessionOpened(IoSession session) throws Exception {
		logger.info("session {} opened! addr:{}", session.getId(),
				session.getRemoteAddress());
	}

	@Override
	public void sessionClosed(IoSession session) throws Exception {
		logger.info("session {} closed! addr:{}", session.getId(),
				session.getRemoteAddress());
	}

	@Override
	public void sessionIdle(IoSession session, IdleStatus status)
			throws Exception {
		logger.info("session idle : {}!", status.toString());
	}

	@Override
	public void exceptionCaught(IoSession session, Throwable cause)
			throws Exception {
		session.close(true);
		logger.warn(session.toString(), cause);
	}

	public static void main(String[] args) throws InterruptedException {
		ArrayBlockingQueue<byte[]> q1 = new ArrayBlockingQueue<>(100);
		ArrayBlockingQueue<byte[]> q2 = new ArrayBlockingQueue<>(100);
		byte[] b = new byte[] { 1, 2, 3 };
		byte[] b1 = new byte[3];
		System.arraycopy(b, 0, b1, 0, 3);
		q1.put(b);
		q2.put(b1);
		q1.take()[1] = 8;
	}
}
